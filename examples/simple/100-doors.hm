-- Copyright (c) 2014 Quildreen Motta <quildreen@gmail.com>
--
-- Permission is hereby granted, free of charge, to any person
-- obtaining a copy of this software and associated documentation files
-- (the "Software"), to deal in the Software without restriction,
-- including without limitation the rights to use, copy, modify, merge,
-- publish, distribute, sublicense, and/or sell copies of the Software,
-- and to permit persons to whom the Software is furnished to do so,
-- subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-- NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-- LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-- OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-- WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-- The 100 doors problem.
--
-- You have 100 doors in a row that are all initially closed.  You make
-- 100 passes by the doors.  The first time through, you visit every
-- door and toggle the door (if the door is closed, you open it; if it
-- is open, you close it).  The second time you only visit every second
-- door (door #2, #4, #6, ...).  The third time, every third door, and 
-- so on, and so forth, until you only visit the 100th door.
--
-- What state are the doors in after the last pass? Which ones are 
-- open, which ones are closed?
--
-- This implementation uses the observation that after the last pass, 
-- the only doors left open are those for which their numbers are 
-- perfect squares of integers.
module Doors for: Platform where

  open Platform IO expose print


  data Door = Open | Closed
            deriving (Show)

  {- [Door] -}
  doors = 1 ... 100 map: state

  {- Int -> Door -}
  n state = (n square-root == n square-root round)
            then: Open
            else: Closed

  {- [String] -> IO Unit -}
  main: args = 1 ... 100 zip: doors |> print
